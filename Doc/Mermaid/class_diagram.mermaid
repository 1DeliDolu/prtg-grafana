classDiagram
    note "PRTG Grafana Datasource Plugin Architecture"
    
    class DataSource {
        +MyDataSourceOptions options
        +constructor(instanceSettings)
        +query(request)
        +testDatasource()
        +getGroups()
        +getDevices()
        +getSensors()
        +getChannels(objid)
    }

    class PRTGAPI {
        +string baseURL
        +string apiKey
        +duration timeout
        +GetGroups()
        +GetDevices()
        +GetSensors()
        +GetChannels(objid)
        +GetHistoricalData(sensorId, startDate, endDate)
        -buildApiUrl(method, params)
        -baseExecuteRequest(endpoint, params)
    }

    class MyQuery {
        +string queryType
        +string group
        +string device
        +string sensor
        +string channel
        +number objid
        +boolean includeGroupName
        +boolean includeDeviceName
        +boolean includeSensorName
    }

    class PRTGItem {
        <<interface>>
        +boolean active
        +number active_raw
        +string channel
        +string channel_raw
        +string datetime
        +number datetime_raw
        +string device
        +string device_raw
        +string group
        +string group_raw
        +string message
        +string message_raw
        +number objid
        +number objid_raw
        +string priority
        +number priority_raw
        +string sensor
        +string sensor_raw
        +string status
        +number status_raw
        +string tags
        +string tags_raw
    }

    class QueryEditor {
        +MyQuery query
        +onChange(query)
        +onRunQuery()
        -onQueryTypeChange()
        -onGroupChange()
        -onDeviceChange()
        -onSensorChange()
        -onChannelChange()
    }

    class ConfigEditor {
        +MyDataSourceOptions options
        +onOptionsChange()
        +onPathChange()
        +onAPIKeyChange()
        +onCacheTimeChange()
    }

    DataSource --> PRTGAPI : uses
    DataSource --> MyQuery : processes
    QueryEditor --> MyQuery : edits
    PRTGAPI ..> PRTGItem : returns
    DataSource --> ConfigEditor : configures
    
    note for DataSource "Main plugin class\nHandles all data requests"
    note for PRTGAPI "Handles PRTG API communication"
    note for QueryEditor "UI for query building"
